{"ast":null,"code":"// -----------------\n// STATE - This defines the type of data maintained in the Redux store.\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\nexport var actionCreators = {\n  increment: function increment() {\n    return {\n      type: 'INCREMENT_COUNT'\n    };\n  },\n  decrement: function decrement() {\n    return {\n      type: 'DECREMENT_COUNT'\n    };\n  }\n}; // ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport var reducer = function reducer(state, incomingAction) {\n  if (state === undefined) {\n    return {\n      count: 0\n    };\n  }\n\n  var action = incomingAction;\n\n  switch (action.type) {\n    case 'INCREMENT_COUNT':\n      return {\n        count: state.count + 1\n      };\n\n    case 'DECREMENT_COUNT':\n      return {\n        count: state.count - 1\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["actionCreators","increment","type","decrement","reducer","state","incomingAction","undefined","count","action"],"sources":["D:/BI Hub/Project1/Project1/ClientApp/src/store/Counter.ts"],"sourcesContent":["import { Action, Reducer } from 'redux';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface CounterState {\r\n    count: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\r\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    increment: () => ({ type: 'INCREMENT_COUNT' } as IncrementCountAction),\r\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction)\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\r\n    if (state === undefined) {\r\n        return { count: 0 };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT':\r\n            return { count: state.count + 1 };\r\n        case 'DECREMENT_COUNT':\r\n            return { count: state.count - 1 };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"],"mappings":"AAEA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AAEA,OAAO,IAAMA,cAAc,GAAG;EAC1BC,SAAS,EAAE;IAAA,OAAO;MAAEC,IAAI,EAAE;IAAR,CAAP;EAAA,CADe;EAE1BC,SAAS,EAAE;IAAA,OAAO;MAAED,IAAI,EAAE;IAAR,CAAP;EAAA;AAFe,CAAvB,C,CAKP;AACA;;AAEA,OAAO,IAAME,OAA8B,GAAG,SAAjCA,OAAiC,CAACC,KAAD,EAAkCC,cAAlC,EAA2E;EACrH,IAAID,KAAK,KAAKE,SAAd,EAAyB;IACrB,OAAO;MAAEC,KAAK,EAAE;IAAT,CAAP;EACH;;EAED,IAAMC,MAAM,GAAGH,cAAf;;EACA,QAAQG,MAAM,CAACP,IAAf;IACI,KAAK,iBAAL;MACI,OAAO;QAAEM,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;MAAvB,CAAP;;IACJ,KAAK,iBAAL;MACI,OAAO;QAAEA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;MAAvB,CAAP;;IACJ;MACI,OAAOH,KAAP;EANR;AAQH,CAdM"},"metadata":{},"sourceType":"module"}