{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var url = process.env.PUBLIC_URL;\n    var publicUrl = new URL(url, window.location.toString());\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","url","PUBLIC_URL","publicUrl","URL","toString","origin","addEventListener","swUrl","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload"],"sources":["D:/BI Hub/Project1/Project1/ClientApp/src/registerServiceWorker.ts"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}